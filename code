import socket
import threading

# Proxy Configuration
HOST = '127.0.0.1'  # Localhost
PORT = 8080         # Proxy listening port
CACHE = {}          # Dictionary-based caching

def handle_client(client_socket):
    request = client_socket.recv(4096).decode()  # Receive request
    print(f"Received request:\n{request}")

    if not request.startswith("GET"):
        client_socket.close()
        return
    
    # Extract URL from request
    try:
        first_line = request.split("\n")[0]
        url = first_line.split(" ")[1]
    except IndexError:
        client_socket.close()
        return

    if url in CACHE:  # Serve from cache if available
        print(f"Serving from cache: {url}")
        client_socket.sendall(CACHE[url])
    else:
        # Extract host from URL
        http_pos = url.find("://")
        temp = url[(http_pos+3):] if http_pos != -1 else url
        port_pos = temp.find(":")
        webserver_pos = temp.find("/")
        if webserver_pos == -1:
            webserver_pos = len(temp)
        webserver = temp[:webserver_pos]
        port = 80 if port_pos == -1 else int(temp[port_pos+1:webserver_pos])

        try:
            # Connect to the target server
            server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_socket.connect((webserver, port))
            server_socket.sendall(request.encode())  # Forward request

            response = b""
            while True:  # Receive response
                data = server_socket.recv(4096)
                if not data:
                    break
                response += data
            
            CACHE[url] = response  # Cache the response
            client_socket.sendall(response)  # Send response to client
            server_socket.close()

        except Exception as e:
            print(f"Error: {e}")

    client_socket.close()

def start_proxy():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((HOST, PORT))
    server_socket.listen(5)
    print(f"Proxy running on {HOST}:{PORT}")

    while True:
        client_socket, addr = server_socket.accept()
        print(f"Connection received from {addr}")
        client_handler = threading.Thread(target=handle_client, args=(client_socket,))
        client_handler.start()

if __name__ == "__main__":
    start_proxy()
